my_widget_script={init:function(mode,json_data){
var parsedJson=this.parseInitJson(json_data)
;this.initDynamicContent(parsedJson),
window.onresize=(()=>this.resize()),this.parent_class.init(mode,()=>JSON.stringify(parsedJson.widgetData)),
this.addRequiredFieldIndicators(),
this.setUpInitialState(),this.adjustForMode(mode),
this.checkForNames()},to_json:function(){
var widgetJsonString=this.parent_class.to_json(),dynamicContent=this.getDynamicContent(),output={
widgetData:JSON.parse(widgetJsonString),
abNums:this.abNums};return JSON.stringify(output)
},from_json:function(json_data){
var parsedJson=JSON.parse(json_data)
;this.parent_class.from_json(JSON.stringify(parsedJson.widgetData))
},test_data:function(){
var testData=JSON.parse(this.parent_class.test_data()),output={
widgetData:testData,abNums:[1,3]}
;return JSON.stringify(output)},
is_valid:function(b_suppress_message){
var fail=false,fail_log="",name
;if($("#the_form").find("select, textarea, input").each((i,e)=>{
if(!$(e).prop("required"));else if(!$(e).val())fail=true,
name=$(e).attr("id"),fail_log+=name+" is required \n"
}),$("input[type='date']").each((i,e)=>{
var date=$(e).val();if(date){
var validDate=this.isValidDate(date)
;if(!validDate)fail=true,fail_log+="Please enter valid date in form 'YYYY-MM-DD'"
}}),$("input[type='time']").each((i,e)=>{
var time=$(e).val();if(time){
var validtime=this.isValidTime(time)
;if(!validtime)fail=true,fail_log+="Please enter valid time in form 'hh:mm' - 24 hr time"
}}),fail)return bootbox.alert(fail_log);else{
var noErrors=[];return noErrors}},
is_edited:function(){
return this.parent_class.is_edited()},
reset_edited:function(){
return this.parent_class.reset_edited()},
parseInitJson:function(json_data){var jsonString
;if("string"===typeof json_data)jsonString=json_data;else jsonString=json_data()
;var parsedJson=JSON.parse(jsonString)
;return parsedJson},
initDynamicContent:function(parsedJson){
if(parsedJson.abNums)for(var i=0;i<parsedJson.abNums.length;i++){
var abNum=parsedJson.abNums[i]
;this.addAntibodies(abNum)}},
adjustForMode:function(mode){
if("edit"!==mode&&"edit_dev"!==mode)$(".disableOnView").prop("disabled",true),
$("input[type='date']").removeClass(".hasDatePicker"),
$(".hideView").hide();else $("input[type='date']").each((i,e)=>{
this.checkDateFormat($(e))
}),$("input[type='time']").each((i,e)=>{
this.checkTimeFormat($(e))})},
addRequiredFieldIndicators:function(){
$(".needForTableLab").each((i,e)=>{
$(e).html("<span class='hideView' style='color:blue'>#</span>"+$(e).html())
}),$(".requiredLab").each((i,e)=>{
$(e).html("<span class='hideView' style='color:red'>*</span>"+$(e).html())
})},isValidTime:function(timeString){
var regEx="^(((([0-1][0-9])|(2[0-3])):[0-5][0-9]))$"
;if(!timeString.match(regEx))return false;else return true
},isTimeSupported:function(){
var input=document.createElement("input")
;input.setAttribute("type","time")
;var supported=true
;if("time"!==input.type)supported=false
;return this.timeSupported=supported,input.remove(),
supported},timeSupported:true,
checkTimeFormat:function($timeInput){
if(!this.timeSupported){
$timeInput.next(".timeWarning").remove()
;var time=$timeInput.val(),isValid=this.isValidTime(time)
;if(!isValid)$timeInput.after('<div class="text-danger timeWarning">Enter time as "hh:mm" in 24-hr format</div>')
;this.resize()}},isValidDate:function(dateString){
var regEx=/^\d{4}-\d{2}-\d{2}$/
;if(!dateString.match(regEx))return false
;var d=new Date(dateString),dNum=d.getTime()
;if(!dNum&&0!==dNum)return false
;return d.toISOString().slice(0,10)===dateString},
isDateSupported:function(){
var input=document.createElement("input")
;input.setAttribute("type","date")
;var supported=true
;if("date"!==input.type)supported=false
;return this.dateSupported=supported,input.remove(),
supported},dateSupported:true,
checkDateFormat:function($dateInput){
if(!this.dateSupported){
$dateInput.next(".dateWarning").remove()
;var date=$dateInput.val(),isValid=this.isValidDate(date)
;if(!isValid)$dateInput.after('<div class="text-danger dateWarning">Enter date as "YYYY-MM-DD"</div>')
;$dateInput.datepicker({dateFormat:"yy-mm-dd"
}),this.resize()}},setUpInitialState:function(){
$(".myLeftCol").addClass("col-12 col-sm-6 col-md-4 col-lg-3 text-left text-sm-right"),
this.isDateSupported(),
this.isTimeSupported(),$("input[type='date']").prop("placeholder","YYYY-MM-DD").on("change",e=>{
this.checkDateFormat($(e.target))
}),$("input[type='time']").prop("placeholder","hh:mm").on("change",e=>{
this.checkTimeFormat($(e.target))
}),$("textarea.autoAdjust").each((i,e)=>{
e.setAttribute("style","height:"+e.scrollHeight+"px;overflow-y:hidden;")
}).on("input",e=>{
e.target.style.height="auto",e.target.style.height=e.target.scrollHeight+"px",
this.resize()}),$("#addAntibody").on("click",e=>{
this.addAntibodyClick()
}),$("select.alexafluor").each((i,e)=>{
this.showOther($(e)),this.updateFluorInfo($(e))
}),this.updateWatched()
;for(var i=0;i<this.abNums.length;i++)this.updateAbName("primary",this.abNums[i]),
this.updateAbName("secondary",this.abNums[i])
;this.resize()},resize:function(){
this.parent_class.resize_container()},
checkForNames:function(){
$("input, select, textarea").each((i,e)=>{
var hasName=$(e).attr("name")
;if(!hasName)console.log("There is no name attribute for: ",e.id)
})},getDynamicContent:function(){
var dynamicContent={};return dynamicContent},
data_valid_form:function(){var valid=true
;if($(".needForTable").each((i,e)=>{
if(!$(e).val())valid=false
}),!valid)$("#errorMsg").html("<span style='color:red; font-size:36px;'>Please fill out all elements marked by a</span><span style='color:blue; font-size:36px;'> blue #</span>");else $("#errorMsg").html("")
;return valid},alexaFluorDyes:{350:{
absorption:346,emission:442,cssTextColor:"white",
color:"blue",cssBackColor:"blue"},405:{
absorption:401,emission:421,cssTextColor:"white",
color:"blue",cssBackColor:"blue"},430:{
absorption:433,emission:541,cssTextColor:"black",
color:"green/yellow",cssBackColor:"greenyellow"},
488:{absorption:496,emission:519,
cssTextColor:"white",color:"green",
cssBackColor:"green"},532:{absorption:532,
emission:553,cssTextColor:"black",color:"yellow",
cssBackColor:"yellow"},546:{absorption:556,
emission:573,cssTextColor:"black",color:"orange",
cssBackColor:"orange"},555:{absorption:555,
emission:565,cssTextColor:"black",color:"orange",
cssBackColor:"orange"},568:{absorption:578,
emission:603,cssTextColor:"white",
color:"orange/red",cssBackColor:"orangered"},594:{
absorption:590,emission:617,cssTextColor:"white",
color:"red",cssBackColor:"red"},610:{
absorption:612,emission:628,cssTextColor:"white",
color:"red",cssBackColor:"red"},633:{
absorption:632,emission:647,cssTextColor:"white",
color:"far red",cssBackColor:"darkred"},635:{
absorption:633,emission:647,cssTextColor:"white",
color:"far red",cssBackColor:"darkred"},647:{
absorption:650,emission:665,cssTextColor:"white",
color:"near-ir",cssBackColor:"grey"},660:{
absorption:663,emission:690,cssTextColor:"white",
color:"near-ir",cssBackColor:"grey"},680:{
absorption:679,emission:702,cssTextColor:"white",
color:"near-ir",cssBackColor:"grey"},700:{
absorption:702,emission:723,cssTextColor:"white",
color:"near-ir",cssBackColor:"grey"},750:{
absorption:749,emission:775,cssTextColor:"white",
color:"near-ir",cssBackColor:"grey"},790:{
absorption:784,emission:814,cssTextColor:"white",
color:"near-ir",cssBackColor:"grey"}},otherObj:{
absorption:"",emission:"",cssTextColor:"black",
color:"",cssBackColor:"white"},primaryAbsNums:[],
secondaryAbsNums:[],abNums:[],
primaryWatchNames:["target","species","dilution","lot","ref","company"],
primaryColNames:["Target","Species","Dilution","Lot #","Ref/Cat #","Company"],
secondaryWatchNames:["target","species","dilution","lot","ref","company","alexafluor","color","absorption","emission"],
secondaryCalcNames:["target","species","dilution","alexafluor","color","lot","ref","company","absorption","emission"],
secondaryColNames:["Target","Species","Dilution","Lot #","Ref/Cat #","Company","Fluorophore","Color","Absorption Peak","Emission Peak"],
checkInArray:function(searchVal,array){
var inArray=-1!==$.inArray(searchVal,array)
;return inArray},
dataSearch:function(dataName,dataValue){
var dataSearch="[data-"+dataName+"='"+dataValue+"']"
;return dataSearch},abNumSearch:function(abNum){
var abSearch=this.dataSearch("abnum",abNum)
;return abSearch},abTypeSearch:function(abType){
var abSearch=this.dataSearch("abtype",abType)
;return abSearch},abSearch:function(abType,abNum){
var abSearch=this.abTypeSearch(abType)+this.abNumSearch(abNum)
;return abSearch},calcSearch:function(calc){
var calcSearch=this.dataSearch("calc",calc)
;return calcSearch},watchSearch:function(watch){
var watchSearch=this.dataSearch("watch",watch)
;return watchSearch},watchValue:function($el){
var watch=$el.data("watch"),calcSearch=this.calcSearch(watch),abType=$el.data("abtype"),abNum=$el.data("abnum"),val=$el.val()
;if(abType)calcSearch+=this.abTypeSearch(abType)
;if(abNum)calcSearch+=this.abNumSearch(abNum)
;if("alexafluor"===watch&&"Other"!==val)val="AF"+val
;$(calcSearch).html(val),this.resize()},
updateAbName:function(abType,abNum){
var search=this.abSearch(abType,abNum),target=$(".target"+search).val(),species=$(".species"+search).val()
;if(target&&species)var name=this.capitalize(species)+" anti-"+target;else var name=this.capitalize(abType)+" Antibody "+abNum
;$(".abName"+search).text(name),this.resize()},
capitalize:function(string){
return string.charAt(0).toUpperCase()+string.slice(1)
},showOther:function($el){if("Other"===$el.val()){
var $other=$el.next(".ifOther").show(),thisScrollHeight=$other.prop("scrollHeight")
;$other.css("height",thisScrollHeight).css("overflow-y","hidden")
}else $el.next(".ifOther").hide();this.resize()},
colorFluorOptions:function($selection){
$selection.find("option").each((i,e)=>{
var val=$(e).val()
;if("Other"!==val)var thisAF=this.alexaFluorDyes[val];else var thisAF=this.otherObj
;this.colorFluor($(e),thisAF)})},
colorFluor:function($el,alexaFluorObj){
$el.css("background-color",alexaFluorObj.cssBackColor).css("color",alexaFluorObj.cssTextColor)
},updateFluorInfo:function($el){
var thisVal=$el.val();if(thisVal){
var abType=$el.data("abtype"),abNum=$el.data("abnum"),abSearch=this.abSearch(abType,abNum),fieldsToUpdate=["color","absorption","emission"]
;if("Other"!==thisVal)var thisAF=this.alexaFluorDyes[thisVal];else var thisAF=this.otherObj
;for(i=0;i<fieldsToUpdate.length;i++){
var field=fieldsToUpdate[i],watchSearch=this.watchSearch(field)
;$(abSearch+watchSearch).val(thisAF[field]).each((i,e)=>{
this.watchValue($(e))})}
this.colorFluor($(this.calcSearch("color")+abSearch),thisAF),
this.colorFluor($(".alexafluor"+abSearch),thisAF),
this.colorFluor($el.parents(".card-body").prev(),thisAF),
this.resize()}},toggleCard:function($cardHead){
$cardHead.next().toggleClass("collapse"),
$cardHead.next().find("textarea.autoAdjust").each((i,e)=>{
if(!$(e).is(":hidden"))e.setAttribute("style","height:"+e.scrollHeight+"px;overflow-y:hidden;display:inline-block;")
}),this.resize()},
makeCard:function($div,cardHeadContent,cardBodyContent,abNum){
$div.append($("<div></div>",{class:"col col-md-6",
"data-abnum":abNum}).append($("<div></div>",{
class:"card"}).append($("<button></button>",{
type:"button",class:"card-header"
}).on("click",e=>{
this.toggleCard($(e.currentTarget))
}).append(cardHeadContent)).append($("<div></div>",{
class:"card-body collapse"
}).append(cardBodyContent)))),this.resize()},
addAntibodyClick:function(){var abNum=1
;if(this.abNums.length>0){
var lastAb=this.abNums[this.abNums.length-1]
;abNum=lastAb+1}
var inArray=this.checkInArray(abNum,this.abNums)
;if(!inArray)this.addAntibodies(abNum)},
addAntibodies:function(abNum){
this.abNums.push(abNum),$(".cardDiv").append($("<h3/>",{
"data-abnum":abNum,class:"col-12"
}).append("Antibody Series "+abNum)).append($("<div></div>",{
class:"col-12 mb-2","data-abnum":abNum
}).append($("<input></input>",{type:"button",
"data-abnum":abNum,value:"Delete antibody",
name:"deleteab"+abNum,id:"deleteAb"+abNum,
class:"fullWidth deleteAb hideView"
}).on("click",e=>{this.deleteAb(abNum)
}))),this.addAbTableRow("primary",abNum,this.primaryWatchNames),
this.addAbCard("primary",abNum,this.primaryWatchNames,this.primaryColNames),
this.addAbTableRow("secondary",abNum,this.secondaryCalcNames),
this.addAbCard("secondary",abNum,this.secondaryWatchNames,this.secondaryColNames)
;var primaryAbSearch=this.abSearch("primary",abNum),secondaryAbSearch=this.abSearch("secondary",abNum)
;$(".species"+primaryAbSearch).on("input",e=>{
var thisVal=$(e.target).val()
;$(".target"+secondaryAbSearch).val(thisVal),this.updateAbName("secondary",abNum),
this.updateWatched()})},updateWatched:function(){
$(".watch").each((i,e)=>{
var watch=$(e).data("watch")
;if("alexafluor"!==watch)this.watchValue($(e));else if("Other"!==$(e).val())this.watchValue($(e));else{
var $other=$(e).next(".ifOther"),other=$other.val(),calcSearch=this.calcSearch("alexafluor"),abType=$other.data("abtype"),abNum=$other.data("abnum"),abSearch=this.abSearch(abType,abNum)
;$(abSearch+calcSearch).text(other)}})},
deleteAb:function(abNum){
this.runIfConfirmed("Are you sure that you wish to delete this antibody?",()=>{
var search=this.abNumSearch(abNum)
;$(search).remove()
;var index=this.abNums.indexOf(abNum)
;if(index>-1)this.abNums.splice(index,1)})},
addAbTableRow:function(abType,abNum,colNames){
var $tableBody=$(".abTable"+this.abTypeSearch(abType)).find("tbody")
;for($tableBody.append($("<tr/>")),
i=0;i<colNames.length;i++){var col=colNames[i]
;$tableBody.find("tr").last().append($("<td/>",{
"data-abtype":abType,"data-abnum":abNum,
"data-calc":col}))}},
addAbCard:function(abType,abNum,watchNames,colNames){
var $cardDiv=$(".cardDiv"),cardHead=$("<div></div>",{
"data-abtype":abType,"data-abnum":abNum,
class:"abName"
}).append(this.capitalize(abType)+" Antibody "+abNum),cardBody=$("<div></div>",{
"data-abtype":abType,"data-abnum":abNum,
class:"container"
}),lengthEntries=watchNames.length
;for(i=0;i<lengthEntries;i++){
var type=watchNames[i],thisID=abType+type+abNum,inputObject={
class:"fullWidth watch "+type,id:thisID,
name:thisID,"data-abtype":abType,
"data-abnum":abNum,"data-watch":type}
;if("alexafluor"===type){
var $input=$("<select></select>",inputObject)
;for(dye in this.alexaFluorDyes)$input.append($("<option></option>",{
value:dye}).append("AlexaFluor "+dye))
;$input.append($("<option></option>",{
value:"Other"}).append("Other")).on("input",e=>{
this.showOther($(e.currentTarget)),
this.updateFluorInfo($(e.currentTarget))})
}else var $input=$("<input></input>",inputObject)
;if(cardBody.append($("<div></div>",{class:"row"
}).append($("<div></div>",{
class:"col-12 col-md font-weight-bold"
}).append(colNames[i])).append($("<div></div>",{
class:"col"
}).append($input))),"target"===type||"species"===type)cardBody.find("input").last().on("change",e=>{
this.updateAbName(abType,abNum)})
;if("alexafluor"===type)cardBody.find("select").parent().append($("<texta"+"rea></texta"+"rea>",{
class:"fullWidth autoAdjust ifOther "+type,
id:thisID+"other",name:thisID+"other",
"data-abtype":abType,"data-abnum":abNum
}).on("input",e=>{
var calcSearch=this.calcSearch("alexafluor"),abSearch=this.abSearch(abType,abNum)
;$(abSearch+calcSearch).text($(e.target).val())}))
}cardBody.find(".watch").each((i,e)=>{
this.watchValue($(e))}).on("input",e=>{
this.watchValue($(e.target))
}),this.makeCard($cardDiv,cardHead,cardBody,abNum),cardBody.find(".alexafluor").not(".ifOther").each((i,e)=>{
this.updateFluorInfo($(e))
}),this.colorFluorOptions(cardBody.find("select.alexafluor"))
},runIfConfirmed:function(text,functionToCall){
var thisMessage="Are you sure?"
;if(text)thisMessage=text;bootbox.confirm({
message:thisMessage,callback:proceed=>{
if(proceed)functionToCall()}})},
dialogConfirm:function(text,functionToCall){
var thisMessage="Do you want to proceed?"
;if(text)thisMessage=text;bootbox.confirm({
message:thisMessage,callback:result=>{
functionToCall(result)}})},
runBasedOnInput:function(prompt,functionToCall){
var thisTitle="Enter value:"
;if(prompt)thisTitle=prompt;bootbox.prompt({
title:thisTitle,callback:result=>{
functionToCall(result)}})}};